{"version":3,"sources":["sf-a_init.js","sf-controller.js","sf-loader.js","sf-model.js","sf-router.js"],"names":["sf","arguments","constructor","Function","loader","onFinish","apply","setTimeout","model","queuePreprocess","parsePreprocess","$","each","router","init","this","attributes","value","fn","extend","animateCSS","animationName","callback","duration","self","animationEnd","animation","OAnimation","MozAnimation","WebkitAnimation","t","undefined","style","css","addClass","one","removeClass","controller","active","for","name","func","root","fromElement","element","elem","parents","attr","listenSFClick","e","target","script","eq","_modelScope","modelKeys","scopeMask","RegExp","replace","full","matched","split","method","method_","eval","shift","join","pop","length","console","error","run","DOMWasLoaded","on","loadedContent","totalContent","whenDOMLoaded","whenProgress","indexOf","push","onProgress","f","i","removeAttribute","list","temp","document","getElementsByTagName","innerHTML","js","text","appendTo","everythingLoaded","setInterval","test","readyState","clearInterval","splice","prototype","bindingEnabled","bindedList","bindedListIndex","prevAll","modelRef","keys","Object","clearElementData","current","setAttribute","dataParser","html","mask","scope","runEval","itemMask","actual","slice","uniqueDataParser","_content_","take","passVar","currentIndex","strDeclare","firstTime","key","JSON","stringify","VarPass","result","check","trim","call","args","a","values","regex","match","exec","message","bindArray","modelName","propertyName","oldArray","parse","editProperty","processElement","index","update","insertBefore","exist","find","item","create","outerHTML","insertAfter","currentRemoved","startRemove","remove","propertyProxy","subject","defineProperty","Array","real","until","foundChanges","loopParser","content","returns","items","enumerable","configurable","get","set","val","refreshBind","bindInput","whichVar","removeAttr","keyup","bindObject","parent","after","next","before","data","append","addEventListener","bindRef","removeBinding","id","ref","cache","created","Date","now","object","dcBracket","which","Node","attrs","attrName","callbackFunction","getOwnPropertyDescriptor","objValue","bindElement","brackets","bindable","targetNode","childNodes","body","excludes","toUpperCase","currentNode","nodeName","nodeType","nodeValue","parentNode","loading","currentPage","initialized","path","window","location","pathname","lazy","beforeEvent","currentRouterURL","onEvent","loaded","event","lazyViewPoint","url","href","origin","charAt","load","history","pushState","LazyRouter","RouterLoading","oldPath","abort","loadURL","post","_scarlets","success","afterEvent","skipLazyView","DOMReference","found","oldURL","newURL","replaceState"],"mappings":"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","file":"scarletsframe.min.js","sourcesContent":["if(typeof sf === 'undefined'){\r\n    sf = function(){\r\n        if(arguments[0].constructor === Function){\r\n            return sf.loader.onFinish.apply(null, arguments);\r\n        }\r\n    };\r\n}\r\n\r\nsetTimeout(function(){\r\n    sf(function(){\r\n        sf.model.queuePreprocess();\r\n        sf.model.parsePreprocess();\r\n\r\n        $('[sf-controller]').each(function(){\r\n            sf.router.init(this.attributes['sf-controller'].value);\r\n        });\r\n    });\r\n}, 10);\r\n\r\n// Add animate.css feature on jQuery\r\n$.fn.extend({\r\n  animateCSS: function(animationName, callback, duration) {\r\n    var self = this;\r\n    var animationEnd = {\r\n        animation: 'animationend',\r\n        OAnimation: 'oAnimationEnd',\r\n        MozAnimation: 'mozAnimationEnd',\r\n        WebkitAnimation: 'webkitAnimationEnd',\r\n    };\r\n\r\n    for (var t in animationEnd)\r\n        if (self[0].style[t] !== undefined){\r\n            animationEnd = animationEnd[t];\r\n            break;\r\n        }\r\n\r\n    if(duration)\r\n        self.css('-webkit-animation-duration', duration+'s').css('animation-duration', duration+'s');\r\n\r\n    self.addClass('animated ' + animationName).one(animationEnd, function(){\r\n        setTimeout(function(){\r\n            $(self).removeClass('animated ' + animationName);\r\n        }, 1);\r\n\r\n        if(duration)\r\n            $(self).css('-webkit-animation-duration', '').css('animation-duration', '');\r\n\r\n        if (typeof callback === 'function') callback();\r\n    });\r\n\r\n    return self;\r\n  }\r\n});","// DOM Controller on loaded app\r\nsf.controller = new function(){\r\n    var self = this;\r\n    var controller = {};\r\n    self.active = {};\r\n\r\n    self.for = function(name, func){\r\n        if(!sf.model.root[name])\r\n            sf.model.root[name] = {};\r\n\r\n        controller[name] = func;\r\n    }\r\n\r\n    self.fromElement = function(element){\r\n        var elem = $(element);\r\n        var model = elem.parents(\"[sf-model]\").attr('sf-model');\r\n        if(!model)\r\n            model = elem.parents('[sf-controller]').attr('sf-controller');\r\n        return model;\r\n    }\r\n\r\n    var listenSFClick = function(e){\r\n        var element = $(e.target);\r\n        var script = element.attr('sf-click');\r\n\r\n        if(!script){\r\n            element = element.parents('[sf-click]').eq(0);\r\n            script = element.attr('sf-click');\r\n        }\r\n\r\n        var model = element.parents('[sf-model]').attr('sf-model');\r\n\r\n        if(!sf.model.root[model])\r\n            model = element.parents('[sf-controller]').attr('sf-controller');\r\n\r\n        if(!sf.model.root[model])\r\n            throw \"Couldn't find model for \"+model+\" that was called from sf-click\";\r\n\r\n        var _modelScope = sf.model.root[model];\r\n\r\n        var modelKeys = sf.model.modelKeys(_modelScope);\r\n        var scopeMask = RegExp('(?<=\\\\b[^.]|^|\\\\n| +|\\\\t|\\\\W )('+modelKeys+')(?=(?:[^\"\\']*(?:\\'|\")[^\"\\']*(?:\\'|\"))*[^\"\\']*$)\\\\b', 'g');\r\n\r\n        script = script.replace(scopeMask, function(full, matched){\r\n            return '_modelScope.'+matched;\r\n        });\r\n\r\n        script = script.split('(');\r\n\r\n        var method = script[0];\r\n        var method_ = method;\r\n\r\n        // Get method reference\r\n        try{\r\n            method = eval(method);\r\n        } catch(e) {\r\n            method = false;\r\n        }\r\n\r\n        if(!method){\r\n            console.error(\"Error on sf-click for model: \" + model + ' [Cannot find '+method_+']\\n', e.target);\r\n            return;\r\n        }\r\n\r\n        // Take the argument list\r\n        script.shift();\r\n        script = script.join('(');\r\n        script = script.split(')');\r\n        script.pop();\r\n        script = script.join('(');\r\n\r\n        // Turn argument as array\r\n        if(script.length !== 0)\r\n            script = eval('['+script+']');\r\n        if(!script)\r\n            script = [];\r\n\r\n        try{\r\n            method.apply(element, script);\r\n        } catch(e) {\r\n            console.error(\"Error on sf-click for model: \" + model + '\\n', e.target, '\\n', e);\r\n        }\r\n    }\r\n\r\n    self.run = function(name, func){\r\n        if(!sf.loader.DOMWasLoaded)\r\n            return sf(function(){\r\n                self.run(name, func);\r\n            });\r\n\r\n        if(controller[name]){\r\n            if(!self.active[name]){\r\n                if(controller[name])\r\n                    controller[name](sf.model.root[name], sf.model.root);\r\n\r\n                // Listen to sf-click\r\n                $('[sf-controller=\"'+name+'\"]').on('click', '[sf-click]', listenSFClick);\r\n\r\n                self.active[name] = true;\r\n            }\r\n        }\r\n\r\n        if(func)\r\n            func(sf.model.root[name], sf.model.root);\r\n\r\n        // Mark as loaded\r\n        if(controller[name])\r\n            delete controller[name];\r\n    }\r\n\r\n    self.init = function(){\r\n        if(!sf.loader.DOMWasLoaded)\r\n            return sf(function(){\r\n                self.init(name);\r\n            });\r\n\r\n        $('[sf-controller]').each(function(){\r\n            self.run(this.attributes['sf-controller'].value);\r\n        });\r\n    }\r\n}","sf.loader = new function(){\r\n    var self = this;\r\n    self.loadedContent = 0;\r\n    self.totalContent = 1;\r\n    self.DOMWasLoaded = false;\r\n\r\n    var whenDOMLoaded = [];\r\n    var whenProgress = [];\r\n\r\n    // Make event listener\r\n    self.onFinish = function(func){\r\n        if(self.DOMWasLoaded) return func();\r\n        if(whenDOMLoaded.indexOf(func) !== -1) return;\r\n        whenDOMLoaded.push(func);\r\n    }\r\n    self.onProgress = function(func){\r\n        if(self.DOMWasLoaded) return func(self.loadedContent, self.totalContent);\r\n        if(whenProgress.indexOf(func) !== -1) return;\r\n        whenProgress.push(func);\r\n    }\r\n\r\n    self.f = function(element){\r\n        self.loadedContent++;\r\n        for (var i = 0; i < whenProgress.length; i++) {\r\n            whenProgress[i](self.loadedContent, self.totalContent);\r\n        }\r\n        if(element) element.removeAttribute('onload');\r\n    }\r\n\r\n    self.css = function(list){\r\n        self.totalContent = self.totalContent + list.length;\r\n        var temp = '';\r\n        for(var i = 0; i < list.length; i++){\r\n            temp += '<link onload=\"sf.loader.f(this)\" rel=\"stylesheet\" href=\"'+list[i]+'\">';\r\n        }\r\n        document.getElementsByTagName('head')[0].innerHTML += temp;\r\n    }\r\n\r\n    self.js = function(list, target = 'head'){\r\n        self.totalContent = self.totalContent + list.length;\r\n        var text = '';\r\n        for(var i = 0; i < list.length; i++){\r\n            text += '<script onload=\"sf.loader.f(this)\" type=\"text/'+'javascript\" src=\"'+list[i]+'\"></'+'script>';\r\n        }\r\n        $(text).appendTo(target);\r\n    }\r\n\r\n    var everythingLoaded = setInterval(function() {\r\n    if (/loaded|complete/.test(document.readyState)) {\r\n        clearInterval(everythingLoaded);\r\n        self.DOMWasLoaded = true;\r\n        for (var i = 0; i < whenDOMLoaded.length; i++) {\r\n            whenDOMLoaded[i]();\r\n        }\r\n        whenProgress.splice(0);\r\n        whenDOMLoaded.splice(0);\r\n    }\r\n    }, 100);\r\n};\r\nsf.prototype.constructor = sf.loader.onFinish;","// Data save and HTML content binding\r\nsf.model = new function(){\r\n    var self = this;\r\n    self.root = {};\r\n\r\n    var bindingEnabled = false;\r\n\r\n    self.fromElement = function(element, func = false){\r\n        var elem = $(element);\r\n        var model = sf.controller.fromElement(element);\r\n\r\n        if(!model)\r\n            throw 'model or controller was not found';\r\n\r\n        var bindedList = elem.attr('[sf-bind-list]');\r\n        if(!bindedList)\r\n            bindedList = elem.parents('[sf-bind-list]').attr('sf-bind-list');\r\n\r\n        if(!bindedList){\r\n            if(func) return func(self.root[model], -1);\r\n            else return self.root[model];\r\n        }\r\n\r\n        // Find index\r\n        var bindedListIndex = 0;\r\n        if(bindedList)\r\n            bindedListIndex = elem.parents('[sf-bind-list]').prevAll('[sf-bind-list]').length;\r\n\r\n        if(func) return func(self.root[model][bindedList], bindedListIndex);\r\n        else return self.root[model][bindedList][bindedListIndex];\r\n    }\r\n\r\n    self.for = function(name, func){\r\n        if(!self.root[name])\r\n            self.root[name] = {};\r\n\r\n        func(self.root[name], self.root);\r\n    }\r\n\r\n    self.modelKeys = function(modelRef){\r\n        var keys = Object.keys(modelRef);\r\n        for (var i = keys.length - 1; i >= 0; i--) {\r\n            if(keys[i].indexOf('$') !== -1)\r\n                keys.splice(i, 1);\r\n        }\r\n        return keys.join('|');\r\n    }\r\n\r\n    var clearElementData = function(current){\r\n        current.innerHTML = '';\r\n        for (var i = 0; i < current.attributes.length; i++) {\r\n            var name = current.attributes[i].name;\r\n            if(name !== 'sf-bind-list')\r\n                current.removeAttribute(name);\r\n        }\r\n        current.setAttribute('style', 'display:none');\r\n    }\r\n\r\n    // For contributor of this library\r\n    // Please be careful when you're passing the eval argument\r\n    var dataParser = function(html, model, mask, scope, runEval = ''){\r\n        // Don't match text inside quote, or object keys\r\n        var scopeMask = RegExp('(?<=\\\\b[^.]|^|\\\\n| +|\\\\t|\\\\W )('+self.modelKeys(model)+')(?=(?:[^\"\\']*(?:\\'|\")[^\"\\']*(?:\\'|\"))*[^\"\\']*$)\\\\b', 'g');\r\n\r\n        if(mask)\r\n            var itemMask = RegExp('(?<=\\\\b[^.]|^|\\\\n| +|\\\\t|\\\\W )'+mask+'\\\\.(?=(?:[^\"\\']*(?:\\'|\")[^\"\\']*(?:\\'|\"))*[^\"\\']*$)\\\\b', 'g');\r\n\r\n        bindingEnabled = true;\r\n\r\n        var _modelScope = sf.model.root[scope];\r\n        return html.replace(/{{([^@].*?)}}/g, function(actual, temp){\r\n            // Mask model for variable\r\n            temp = temp.replace(scopeMask, function(full, matched){\r\n                return '_modelScope.'+matched;\r\n            });\r\n\r\n            // Mask item variable\r\n            if(mask){\r\n                temp = temp.replace(itemMask, function(matched){\r\n                    return 'model.'+matched[0].slice(1);\r\n                });\r\n            }\r\n\r\n            // Prevent vulnerability by remove bracket to avoid a function call\r\n            temp = temp.split('(').join('').split(')').join('');\r\n\r\n            // Evaluate\r\n            temp = eval(runEval + temp);\r\n\r\n            return temp;\r\n        });\r\n    }\r\n\r\n    var uniqueDataParser = function(html, model, mask, scope){\r\n        // Get prepared html content\r\n        var _content_ = {\r\n            length:0,\r\n            take:function(passVar, currentIndex){\r\n                var strDeclare = '\"use strict\";var ';\r\n                var firstTime = true;\r\n\r\n                for(var key in passVar){\r\n                    if(typeof passVar[key] === 'string')\r\n                        passVar[key] = '\"'+passVar[key].split('\"').join('\\\\\"')+'\"';\r\n                    else if(typeof passVar[key] === 'object')\r\n                        passVar[key] = JSON.stringify(passVar[key]);\r\n\r\n                    if(!firstTime)\r\n                        strDeclare += ',';\r\n\r\n                    strDeclare += key + ' = ' + passVar[key];\r\n                    firstTime = false;\r\n                }\r\n\r\n                // Disable function call for addional security eval protection\r\n                strDeclare = strDeclare.split('(').join('').split(')').join('');\r\n\r\n                return dataParser(this[currentIndex], model, mask, scope, strDeclare + ';');\r\n            }\r\n        };\r\n\r\n        var VarPass = ['i', 'obj'];\r\n        for (var i = 0; i < VarPass.length; i++) {\r\n            VarPass[i] += ':(typeof '+VarPass[i]+'!=\"undefined\"?'+VarPass[i]+':null)';\r\n        }\r\n        VarPass = '{'+VarPass.join(',')+'}';\r\n        html = html.replace(/{\\[(.*?)\\]}/gs, function(full, matched){\r\n            _content_[_content_.length] = matched;\r\n            _content_.length++;\r\n            return 'result += _content_.take('+VarPass+', '+(_content_.length - 1)+');';\r\n        });\r\n\r\n        // Don't match text inside quote, or object keys\r\n        var scopeMask = RegExp('(?<=\\\\b[^.]|^|\\\\n| +|\\\\t|\\\\W )('+self.modelKeys(model)+')(?=(?:[^\"\\']*(?:\\'|\")[^\"\\']*(?:\\'|\"))*[^\"\\']*$)\\\\b', 'g');\r\n        var _modelScope = sf.model.root[scope];\r\n\r\n        if(mask)\r\n            var itemMask = RegExp('(?<=\\\\b[^.]|^|\\\\n| +|\\\\t|\\\\W )'+mask+'\\\\.(?=(?:[^\"\\']*(?:\\'|\")[^\"\\']*(?:\\'|\"))*[^\"\\']*$)\\\\b', 'g');\r\n\r\n        return html.replace(/{{(@.*?)}}/gs, function(actual, temp){\r\n            // Mask model for variable\r\n            temp = temp.replace(scopeMask, function(matched){\r\n                return '_modelScope.'+matched[1].slice(1);\r\n            });\r\n\r\n            // Mask item variable\r\n            if(mask){\r\n                temp = temp.replace(itemMask, function(matched){\r\n                    return 'model.'+matched[1].slice(1);\r\n                });\r\n            }\r\n\r\n            // Prevent vulnerability by remove bracket to avoid a function call\r\n            temp = temp.split(':');\r\n            temp[0] = temp[0].split('(').join('').split(')').join('');\r\n            temp = temp.join(':');\r\n\r\n            var result = '';\r\n            var check = false;\r\n\r\n            check = temp.split('@if ');\r\n            if(check.length != 1){\r\n                check = check[1].split(':');\r\n            \r\n                // If condition was meet\r\n                if(eval(check[0])){\r\n                    check.shift();\r\n                    result = check.join(':');\r\n                }\r\n            }\r\n\r\n            // Function arguments should like: function@arg1, arg2\r\n            // And it will converted to: model.function(arg1, arg2)\r\n            check = temp.split('@call');\r\n            if(check.length != 1){\r\n                check = check[1].trim();\r\n                var call = check.split('@');\r\n                var args = [];\r\n\r\n                if(call.length !== 1){\r\n                    args = call[1];\r\n\r\n                    args = args.split(' ').join('').split(',');\r\n                    for (var a = 0; a < args.length; a++) {\r\n                        args[a] = eval(args[a]);\r\n                    }\r\n                }\r\n\r\n                call = call[0];\r\n                if(!sf.model.root[scope][call])\r\n                    throw \"'\"+call+\"' was not available inside '\"+scope+\"' model\";\r\n\r\n                var values = sf.model.root[scope][call].apply(null, args);\r\n                result = values;\r\n            }\r\n\r\n            // Warning! Avoid unencoded user inputted content\r\n            // And always check/remove closing ']}' in user content\r\n            // Any function call will be removed for addional security\r\n            check = temp.split('@exec');\r\n            if(check.length != 1){\r\n                check = check[1].split('&lt;').join('<').split('&gt;').join('>').split('&amp;').join('&');\r\n\r\n                // Allowed: for, if, while\r\n                var regex = /(for|if|while)#(.*?):/gs;\r\n                var match = regex.exec(check);\r\n                while (match !== null) {\r\n                  check = check.replace(match[0], match[1] + '(' + match[2] + ')');\r\n                  match = regex.exec(check);\r\n                }\r\n\r\n                var currentIndex = i;\r\n                try{\r\n                    eval(check);\r\n                } catch(e) {\r\n                    console.error(\"Error in @exec with message: \"+e.message);\r\n                    return;\r\n                }\r\n                i = currentIndex;\r\n            }\r\n\r\n            return result;\r\n        });\r\n    }\r\n\r\n    var bindArray = function(html, list, mask, modelName, propertyName){\r\n        var oldArray = JSON.parse(JSON.stringify(list));\r\n        var editProperty = ['pop', 'push', 'splice', 'shift', 'unshift', 'refreshBind'];\r\n        var processElement = function(index, update = false, insertBefore = false){\r\n            var exist = $(\"[sf-model='\"+modelName+\"']\");\r\n            if(exist.length === 0)\r\n                exist = $(\"[sf-controller='\"+modelName+\"']\");\r\n\r\n            if(exist.length === 0) return;\r\n            exist = exist.find(\"[sf-bind-list='\"+propertyName+\"']\");\r\n\r\n            var callback = false;\r\n            if(self.root[modelName]['on$'+propertyName])\r\n                callback = self.root[modelName]['on$'+propertyName];\r\n\r\n            // Remove\r\n            if(!update){\r\n                if(exist[index]){\r\n                    var currentRemoved = false;\r\n                    var startRemove = function(){\r\n                        if(currentRemoved) return;\r\n                        currentRemoved = true;\r\n\r\n                        if(exist.length <= 1)\r\n                            return clearElementData(exist[index]);\r\n                        \r\n                        exist[index].remove();\r\n                    }\r\n\r\n                    if(callback.remove){\r\n                        // Auto remove if return false\r\n                        if(!callback.remove(exist[index], startRemove))\r\n                            setTimeout(startRemove, 800);\r\n                    }\r\n\r\n                    // Auto remove if no callback\r\n                    else startRemove();\r\n                }\r\n                return;\r\n            }\r\n\r\n            // Create or update\r\n            var item = self.root[modelName][propertyName][index];\r\n\r\n            var temp = dataParser(html, item, mask, modelName);\r\n            temp = uniqueDataParser(temp, item, mask, modelName);\r\n            temp = $(temp);\r\n\r\n            // Create\r\n            if(!exist[index]){\r\n                if(callback.create)\r\n                    callback.create(temp[0]);\r\n\r\n                temp.insertAfter(exist[exist.length - 1]);\r\n            }\r\n\r\n            else{\r\n                // Create\r\n                if(insertBefore){\r\n                    if(callback.create)\r\n                        callback.create(temp[0]);\r\n\r\n                    temp.insertBefore(exist[0]);\r\n                }\r\n\r\n                // Update\r\n                else{\r\n                    if(callback.update)\r\n                        callback.update(temp[0]);\r\n\r\n                    exist[index].outerHTML = temp[0].outerHTML;\r\n                }\r\n            }\r\n        }\r\n        var propertyProxy = function(subject, name){\r\n            Object.defineProperty(subject, name, {\r\n                value: function(){\r\n                    var temp = undefined;\r\n\r\n                    if(Array.prototype[name])\r\n                        temp = Array.prototype[name].apply(this, arguments);\r\n\r\n                    if(name === 'pop')\r\n                        processElement(this.length);\r\n\r\n                    else if(name === 'push')\r\n                        processElement(this.length - 1, true);\r\n\r\n                    else if(name === 'shift')\r\n                        processElement(0);\r\n\r\n                    else if(name === 'splice'){\r\n                        if(arguments.length >= 3){\r\n                            arguments[0] = false;\r\n                            name = 'refreshBind';\r\n                        }\r\n                        else{\r\n                            var real = arguments[0];\r\n                            if(real < 0) real = this.length + real + 1;\r\n\r\n                            var until = arguments[1];\r\n                            if(!until) until = this.length - real;\r\n\r\n                            for (var i = 0; i < until; i++) {\r\n                                processElement(real);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    else if(name === 'unshift')\r\n                        processElement(0, true, true);\r\n\r\n                    if(name === 'refreshBind'){\r\n                        if(arguments[0] || arguments[0] === 0)\r\n                            processElement(arguments[0], true);\r\n                        else {\r\n                            var foundChanges = false;\r\n                            for (var i = 0; i < this.length; i++) {\r\n                                if(JSON.stringify(oldArray[i]) !== JSON.stringify(this[i])){\r\n                                    foundChanges = true;\r\n                                    processElement(i, true);\r\n                                }\r\n                            }\r\n                            if(foundChanges)\r\n                                oldArray = JSON.parse(JSON.stringify(this));\r\n                        }\r\n                    }\r\n\r\n                    return temp;\r\n                }\r\n            });\r\n        }\r\n\r\n        for (var i = 0; i < editProperty.length; i++) {\r\n            propertyProxy(list, editProperty[i]);\r\n        }\r\n    }\r\n\r\n    var loopParser = function(name, content, script){\r\n        var returns = '';\r\n        var method = script.split(' in ');\r\n        var mask = method[0];\r\n\r\n        if(!sf.model.root[name])\r\n            return console.error(\"Can't parse element because model for '\"+name+\"' was not found\", $(content)[0]);\r\n\r\n        var items = self.root[name][method[1]];\r\n        content = $(content).attr('sf-bind-list', method[1])[0].outerHTML;\r\n        content = content.replace(/  +|\\t+/g, '');\r\n\r\n        if(method.length === 2){\r\n            for(var i in items){\r\n                var item = items[i];\r\n\r\n                temp = dataParser(content, item, mask, name);\r\n                temp = uniqueDataParser(temp, item, mask, name);\r\n                returns += temp;\r\n            }\r\n            Object.defineProperty(self.root[name], method[1], {\r\n                enumerable: true,\r\n                configurable: true,\r\n                get:function(){\r\n                    return items;\r\n                },\r\n                set:function(val){\r\n                    for (var i = 0; i < val.length; i++) {\r\n                        if(items[i]){\r\n                            items[i] = val[i];\r\n                            items.refreshBind(i);\r\n                        }\r\n                        else items.push(val[i]);\r\n                    }\r\n\r\n                    if(items.length > val.length)\r\n                        items.splice(items.length - val.length);\r\n\r\n                    return items;\r\n                }\r\n            });\r\n            bindArray(content, items, mask, name, method[1]);\r\n        }\r\n        return returns;\r\n    }\r\n\r\n    var bindInput = function(){\r\n        $('input[sf-bound]').each(function(){\r\n            var element = $(this);\r\n            var model = element.parents('[sf-controller]').attr('sf-controller');\r\n            if(!model) return;\r\n\r\n            var whichVar = element.attr('sf-bound');\r\n\r\n            // Get reference\r\n            if(typeof self.root[model][whichVar] === undefined){\r\n                console.error('Cannot get reference for self.root[\"' + model + '\"][\"' + whichVar+'\"]');\r\n                return;\r\n            }\r\n\r\n            element.attr('sf-bounded', whichVar);\r\n            element.removeAttr('sf-bound');\r\n\r\n            // Bound key up\r\n            element.keyup(function(e){\r\n                self.root[model][whichVar] = element.val();\r\n            });\r\n\r\n            // Bind value\r\n            element.attr('value', '{{'+whichVar+'}}');\r\n            bindObject(element, self.root[model], whichVar, 'attr');\r\n        });\r\n    }\r\n\r\n    self.init = function(){\r\n        $('[sf-repeat-this]').each(function(){\r\n            var self = $(this);\r\n            var parent = self.parent();\r\n\r\n            var after = self.next();\r\n            if(!after.length || self[0] === after[0])\r\n                after = false;\r\n\r\n            var before = self.before();\r\n            if(!before.length || self[0] === before[0])\r\n                before = false;\r\n\r\n            var script = self.attr('sf-repeat-this');\r\n            self.removeAttr('sf-repeat-this');\r\n            var controller = self.parents('[sf-controller]').attr('sf-controller');\r\n\r\n            var content = this.outerHTML;\r\n\r\n            var data = loopParser(controller, content, script);\r\n            if(data){\r\n                self.remove();\r\n                \r\n                data = $(data);\r\n                if(after)\r\n                    data.insertBefore(after);\r\n                else if(before)\r\n                    data.insertAfter(before);\r\n                else\r\n                    parent.append(data);\r\n            }\r\n            else{\r\n                self.attr('sf-bind-list', script.split(' in ')[1]);\r\n                clearElementData(this);\r\n            }\r\n        });\r\n    }\r\n\r\n    document.addEventListener('DOMNodeRemoved', function(e){\r\n        if(!bindingEnabled || !bindRef.length) return;\r\n\r\n        var element = e.target;\r\n        $(element).find('[sf-bind-id]').each(function(){\r\n            removeBinding(this);\r\n        });\r\n        removeBinding(element);\r\n    });\r\n    document.addEventListener('DOMNodeInserted', function(e){\r\n        if(!bindingEnabled) return;\r\n        \r\n        var element = e.target;\r\n        if(element.outerHTML && element.outerHTML.indexOf('{{') !== -1){\r\n            var elem = $(element);\r\n            var model = elem.parents('sf-model');\r\n\r\n            if(!model.length)\r\n                model = elem.parents('sf-controller');\r\n            if(!model.length)\r\n                return;\r\n\r\n            // Process data binding\r\n        }\r\n    });\r\n\r\n    var removeBinding = function(element){\r\n        if(!element.attributes || !element.attributes['sf-bind-id']) return;\r\n\r\n        var id = element.attributes['sf-bind-id'].value;\r\n        if(!bindRef[id]) return;\r\n        var ref = bindRef[id];\r\n        \r\n        if(bindRef.cache[id].created >= Date.now() - 3000)\r\n            return;\r\n\r\n        for (var i = 0; i < ref.length; i++) {\r\n            var value = ref[i].object[ref[i].propertyName];\r\n            Object.defineProperty(ref[i].object, ref[i].propertyName, {\r\n                value:value\r\n            });\r\n        }\r\n\r\n        delete bindRef[id];\r\n\r\n        // Remove callback left\r\n        var cache = bindRef.cache\r\n        for(var i in cache){\r\n            if(cache[i].callback && cache[i].callback[id])\r\n                delete cache[i].callback[id];\r\n        }\r\n\r\n        bindRef.length--;\r\n    }\r\n\r\n    /*{\r\n        id:[{\r\n            object,\r\n            propertyName\r\n        }]\r\n    }*/\r\n    // For resetting object property it the element was removed from DOM\r\n    var bindRef = {length:0, index:0, cache:{}};\r\n    var dcBracket = /{{.*?}}/;\r\n    var bindObject = function(element, object, propertyName, which){\r\n        if(!(element instanceof Node))\r\n            element = element[0];\r\n\r\n        // First initialization\r\n        var id = bindRef.index;\r\n        $(element).attr('sf-bind-id', id);\r\n\r\n        bindRef.index++;\r\n        bindRef.length++;\r\n        bindRef.cache[id] = {};\r\n        var cache = bindRef.cache[id];\r\n\r\n        cache.attrs = {};\r\n        cache.innerHTML = '';\r\n        cache.modelName = sf.controller.fromElement(element);\r\n        cache.model = self.root[cache.modelName];\r\n        cache.created = Date.now();\r\n\r\n        if(which === 'attr' || !which){\r\n            for(var i in element.attributes){\r\n                // Check if it has a bracket\r\n                if(!dcBracket.test(element.attributes[i].value))\r\n                    continue;\r\n\r\n                var attrName = element.attributes[i].name;\r\n                cache.attrs[attrName] = element.attributes[i].value;\r\n\r\n                if(attrName === 'value')\r\n                    element.removeAttribute(attrName);\r\n            }\r\n        }\r\n\r\n        if(which === 'html' || !which)\r\n            cache.innerHTML = element.innerHTML;\r\n\r\n        // Get current object reference\r\n        bindRef[id] = {\r\n            object:object,\r\n            propertyName:propertyName\r\n        };\r\n\r\n        cache.element = $(element);\r\n        var callbackFunction = function(){\r\n            if(which === 'attr' || !which){\r\n                for(var name in cache.attrs){\r\n                    if(cache.attrs[name].indexOf(propertyName) === -1)\r\n                        continue;\r\n\r\n                    var temp = dataParser(cache.attrs[name], cache.model, false, cache.modelName);\r\n                    if(name === 'value')\r\n                        cache.element.val(temp);\r\n                    else\r\n                        cache.element.attr(name, temp);\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if(which === 'html' || !which){\r\n                var temp = uniqueDataParser(cache.innerHTML, cache.model, false, cache.modelName);\r\n                temp = dataParser(temp, cache.model, false, cache.modelName);\r\n                cache.element.html(temp);\r\n            }\r\n        };\r\n\r\n        if(Object.getOwnPropertyDescriptor(cache.model, propertyName)['set']){\r\n            for(var i in bindRef){\r\n                if(bindRef[i].propertyName === propertyName){\r\n                    bindRef.cache[i].callback[id] = callbackFunction;\r\n                    break;\r\n                }\r\n            }\r\n            return;\r\n        }\r\n\r\n        cache.callback = {};\r\n        cache.callback[id] = callbackFunction;\r\n\r\n        var objValue = object[propertyName]; // Object value\r\n        Object.defineProperty(object, propertyName, {\r\n            enumerable: true,\r\n            configurable: true,\r\n            get:function(){\r\n                return objValue;\r\n            },\r\n            set:function(val){\r\n                objValue = val;\r\n\r\n                for(var i in cache.callback){\r\n                    cache.callback[i]();\r\n                }\r\n\r\n                return objValue;\r\n            }\r\n        });\r\n    }\r\n\r\n    self.bindElement = function(element, which = false){\r\n        var modelName = sf.controller.fromElement(element);\r\n        var model = self.root[modelName];\r\n        if(!model) return console.error(\"Model for \"+modelName+\" was not found while binding:\", element);\r\n\r\n        var scopeMask = RegExp('(?<=\\\\b[^.]|^|\\\\n| +|\\\\t|\\\\W )('+self.modelKeys(model)+')(?=(?:[^\"\\']*(?:\\'|\")[^\"\\']*(?:\\'|\"))*[^\"\\']*$)\\\\b', 'g');\r\n\r\n        var html = element.outerHTML;\r\n        if(which === 'attr')\r\n            html = html.replace(element.innerHTML, '');\r\n\r\n        var brackets = html.match(/(?<={{).*?(?=}})/gs);\r\n        for (var i = 0; i < brackets.length; i++) {\r\n            while ((bindable = scopeMask.exec(brackets[i])) !== null) {\r\n                bindObject(element, model, bindable[i], which);\r\n            }\r\n        }\r\n    }\r\n\r\n    self.queuePreprocess = function(targetNode = false){\r\n        var childNodes = (targetNode || document.body).childNodes;\r\n\r\n        var excludes = ['html','head','style','title','link','meta','script','object','iframe'];\r\n        for (var i = 0; i < excludes.length; i++) {\r\n            excludes[i] = excludes[i].toUpperCase();\r\n        }\r\n\r\n        var temp = [];\r\n        for (var i = 0; i < childNodes.length; i++) {\r\n            var currentNode = childNodes[i];\r\n            if(excludes.indexOf(currentNode.nodeName) !== -1)\r\n                continue;\r\n\r\n            if(currentNode.nodeType === 1){ // Tag\r\n                if(currentNode.attributes['sf-repeat-this']) continue;\r\n\r\n                for (var a = 0; a < currentNode.attributes.length; a++) {\r\n                    if(currentNode.attributes[a].value.indexOf('{{') !== -1){\r\n                        currentNode.setAttribute('sf-preprocess', 'attronly');\r\n                        temp.push(currentNode);\r\n                    }\r\n                }\r\n\r\n                self.queuePreprocess(currentNode);\r\n            }\r\n\r\n            else if(currentNode.nodeType === 3){ // Text\r\n                if(currentNode.nodeValue.indexOf('{{') !== -1){\r\n                    currentNode.parentNode.setAttribute('sf-preprocess', '');\r\n\r\n                    // Reset Siblings\r\n                    for (var a = 0; a < temp.length; a++) {\r\n                        temp[a].removeAttribute('sf-preprocess');\r\n                    }\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    self.parsePreprocess = function(targetNode = false){\r\n        $(targetNode || document.body).find('[sf-preprocess]').each(function(){\r\n            var model = sf.controller.fromElement(this);\r\n            this.removeAttribute('sf-preprocess');\r\n\r\n            if(!sf.model.root[model])\r\n                return console.error(\"Can't parse element because model for '\"+model+\"' was not found\", this);\r\n\r\n            self.bindElement(this, $(this).attr('sf-bind'));\r\n\r\n            // Avoid editing the outerHTML because it will remove the bind\r\n            var temp = uniqueDataParser(this.innerHTML, sf.model.root[model], false, model);\r\n            this.innerHTML = dataParser(temp, sf.model.root[model], false, model);\r\n            for (var i = 0; i < this.attributes.length; i++) {\r\n                if(this.attributes[i].value.indexOf('{{') !== -1){\r\n                    this.attributes[i].value = dataParser(this.attributes[i].value, sf.model.root[model], false, model);\r\n                }\r\n            }\r\n        });\r\n\r\n        bindInput();\r\n    }\r\n}","sf.router = new function(){\r\n    var self = this;\r\n    self.loading = false;\r\n    self.currentPage = '';\r\n    var initialized = false;\r\n    var lazyRouting = false;\r\n\r\n    // Should be called if not using lazy page load\r\n    self.init = function(name){\r\n        if(!sf.loader.DOMWasLoaded)\r\n            return sf(function(){\r\n                self.init(name);\r\n            });\r\n\r\n        var path = window.location.pathname;\r\n\r\n        // Reinit lazy router\r\n        self.lazy();\r\n\r\n        // Run 'before' event for new page view\r\n        beforeEvent(name);\r\n\r\n        initialized = true;\r\n        self.currentPage = name;\r\n        currentRouterURL = path;\r\n    }\r\n\r\n    var before = {};\r\n    // Set index with number if you want to replace old function\r\n    self.before = function(name, func, index = false){\r\n        if(!before[name])\r\n            before[name] = [];\r\n\r\n        if(index === false){\r\n            if(before[name].indexOf(func) === -1)\r\n                before[name].push(func);\r\n        }\r\n        else\r\n            before[name][index] = func;\r\n    }\r\n\r\n    var after = {};\r\n    // Set index with number if you want to replace old function\r\n    self.after = function(name, func, index = false){\r\n        if(!after[name])\r\n            after[name] = [];\r\n\r\n        if(index === false){\r\n            if(after[name].indexOf(func) === -1)\r\n                after[name].push(func);\r\n        }\r\n        else\r\n            after[name][index] = func;\r\n    }\r\n\r\n    // Running 'before' new page going to be displayed\r\n    var beforeEvent = function(name){\r\n        // Load controller\r\n        sf.controller.run(name);\r\n\r\n        if(before[name]){\r\n            if(!sf.model.root[name])\r\n                sf.model.root[name] = {};\r\n\r\n            for (var i = 0; i < before[name].length; i++) {\r\n                before[name][i](sf.model.root[name], sf.model.root);\r\n            }\r\n        }\r\n\r\n        // Init model binding\r\n        sf.model.init(name);\r\n    }\r\n\r\n    // Running 'after' old page going to be removed\r\n    var afterEvent = function(){\r\n        if(self.currentPage !== '' && after[self.currentPage]){\r\n            if(!sf.model.root[self.currentPage])\r\n                sf.model.root[self.currentPage] = {};\r\n\r\n            for (var i = 0; i < after[self.currentPage].length; i++) {\r\n                after[self.currentPage][i](sf.model.root[self.currentPage], sf.model.root);\r\n            }\r\n        }\r\n    }\r\n\r\n    var onEvent = {\r\n        'loading':[],\r\n        'loaded':[],\r\n        'error':[]\r\n    };\r\n    self.on = function(event, func){\r\n        if(onEvent[event].indexOf(func) === -1)\r\n            onEvent[event].push(func);\r\n    }\r\n\r\n    self.lazyViewPoint = {};\r\n    /*\r\n        {\r\n            oldURlPattern:{\r\n                newURLPattern:'.viewPoint'\r\n            }\r\n        }\r\n    */\r\n    self.lazy = function(){\r\n        $('a[href]:not([onclick])').each(function(){\r\n            var url = this.href;\r\n            if(url.indexOf('#') !== -1)\r\n                return;\r\n\r\n            if(url.indexOf(window.location.origin) !== 0 && url.charAt(0) !== '/')\r\n                return; //Not current domain origin\r\n\r\n            $(this).attr('onclick', 'return sf.router.load(this)');\r\n        });\r\n    }\r\n\r\n    self.load = function(elem){\r\n        if(!history.pushState || $(elem).attr('sf-router') == 'ignore')\r\n            return true;\r\n\r\n        return !LazyRouter(elem.href.replace(window.location.origin, ''));\r\n    }\r\n\r\n    var RouterLoading = false;\r\n    var currentRouterURL = '';\r\n    var LazyRouter = function(path){\r\n        for (var i = 0; i < onEvent['loading'].length; i++) {\r\n            onEvent['loading'][i]();\r\n        }\r\n        var oldPath = window.location.pathname;\r\n        initialized = false;\r\n\r\n        if(RouterLoading) RouterLoading.abort();\r\n        RouterLoading = loadURL(window.location.origin + path, {\r\n            post:{\r\n                _scarlets:'.dynamic.'\r\n            },\r\n            success:function(data){\r\n                if(initialized) return;\r\n                lazyRouting = true;\r\n\r\n                // Run 'after' event for old page view\r\n                afterEvent();\r\n\r\n                // Run 'loaded' event\r\n                RouterLoading = false;\r\n                var skipLazyView = false;\r\n                for (var i = 0; i < onEvent['loaded'].length; i++) {\r\n                    skipLazyView = onEvent['loaded'][i](currentRouterURL, path, data) || skipLazyView;\r\n                }\r\n\r\n                var DOMReference = false;\r\n                if(!skipLazyView){\r\n                    var found = false;\r\n                    for(var oldURL in self.lazyViewPoint){\r\n                        if(currentRouterURL.indexOf(oldURL) !== -1){\r\n                            for(var newURL in self.lazyViewPoint[oldURL]){\r\n                                if(currentRouterURL.indexOf(oldURL) !== -1){\r\n                                    found = true;\r\n\r\n                                    // Put new view\r\n                                    DOMReference = $(self.lazyViewPoint[oldURL][newURL]);\r\n                                    DOMReference.html(data);\r\n\r\n                                    // If the init function was called\r\n                                    if(initialized) return;\r\n\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        if(found) break;\r\n                    }\r\n                }\r\n\r\n                // Reinit lazy router\r\n                self.lazy();\r\n\r\n                // Run 'before' event for new page view\r\n                beforeEvent(name, DOMReference);\r\n\r\n                initialized = true;\r\n                lazyRouting = false;\r\n\r\n                self.currentPage = name;\r\n                currentRouterURL = path;\r\n            },\r\n            error:function(){\r\n                window.history.replaceState(null, \"\", oldPath);\r\n                for (var i = 0; i < onEvent['error'].length; i++) {\r\n                    onEvent['error'][i]();\r\n                }\r\n            }\r\n        });\r\n\r\n        window.history.pushState(null, \"\", path);\r\n        return true;\r\n    }\r\n};"]}